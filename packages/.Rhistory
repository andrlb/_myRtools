if(!require("pacman")) install.packages("pacman")
pacman::p_load(
# Data Manipulation and Analysis
tidyverse, # suite of packages designed for data science
# loads: ggplot2, dplyr, tidyr, readr,
#        purrr, tibble, stringr, forcats
reshape2,  # Data restructuring
# Data Visualization
ggthemes,  # extra themes, scales and geoms for ggplot
ggpubr,    # nice commands for ggplot2
# Geographic Data
geobr,     # read geographic data from Brazil
sf,        # support for spatial vector data
# World Geographic Data
rnaturalearth, # world map data from Natural Earth
rnaturalearthdata,
# Brazilian Data
sidrar,     # Access data from SIDRA IBGE
GetBCBData, # Access data from BACEN
rbcb,       # Access data from BACEN
# Date and Time Manipulation
lubridate, # Date-time data manipulation
# Excel Data Interaction
readxl,    # read from xlsx
writexl,   # write to xlsx
openxlsx,  # read, write and edit XLSX files, keeping the format
# Paralel Computing:
future,    # parallel computing
furrr,     # parallel mapping
httr,      # HTTP tools
# Econometrics
forecast,  # Time Series Analysis
plm,       # Linear models for panel data
seasonal,  # Seasonal adjustment
# Web acrapping
rvest,     # download and manipulate HTML and XML
# Miscellaneous
calendR,      # calendários
pryr,         # Tools for Computing
RColorBrewer, # Color schemes for maps and graphics
extrafont,    # Use non-standard fonts
scales,       # comma in numbers
zip,          # zip files
beepr         # beep
)
tema = "cambio"
# pasta de saída dos dados:
path = list(
saida = "C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/_rstudio_antigo/data/bacen/cambio"
)
path$saida
# carregar glossario:
glossario <- read_excel(
file.path(path$saida,
"bacen_cambio_glossario.xlsx"))
# Código das séries:
ids_bacen = glossario$codigo
ids_bacen
# data inicial
data_ini = as.Date(min(glossario$inicio))
data_ini
df = gbcbd_get_series(
id = 25406,
first.date = '2000-01-01',
last.date  = Sys.Date(),
)
# Set up a future plan
plan(multisession)
# ------------------------------------------------------------------------------
# Define a function to download data and retry if unsuccessful
download_data <- function(id) {
tryCatch(
{
df <- gbcbd_get_series(
id = id,
first.date = data_ini,
last.date  = Sys.Date()
)
# Check if the data frame is empty
if (nrow(df) == 1) {
stop("Data frame is empty")
}
return(df)
},
error = function(e) {
message(paste("Failed to download data for id", id, "- retrying"))
Sys.sleep(1)  # wait for 5 seconds before retrying
download_data(id)  # recursive call to retry
}
)
}
# ------------------------------------------------------------------------------
# Use future_map to download data in parallel
df_list = future_map(ids_bacen, ~download_data(.x))
# Now df_list is a list of data frames
# ------------------------------------------------------------------------------
# TRATAMENTO
# ------------------------------------------------------------------------------
# Combine all data frames in the list into one data frame
df = bind_rows(df_list)
# delete column:
df$series.name = NULL
# rename colnames:
df <- df %>%
rename(
data = ref.date,
codigo = id.num
)
# ------------------------------------------------------------------------------
# Assuming df is your data frame
df <- df %>%
spread(key = codigo, value = value)
# Sort the dataframe by the data column
df <- df %>%
arrange(data)
# ------------------------------------------------------------------------------
# renomear as colunas:
rename_vector <- setNames(glossario$colname, glossario$codigo)
# Select only the columns in 'df' that are present in 'glossario$codigo'
common_columns <- intersect(names(df), glossario$codigo)
# Rename the columns
df <- df %>%
rename_at(vars(all_of(common_columns)), ~ rename_vector[.])
# ------------------------------------------------------------------------------
# cria uma lista com o glossario e os dados
cambio_contratado = list(
glossario = glossario,
dados = df
)
View(cambio_contratado$dados)
View(cambio_contratado$glossario)
# ------------------------------------------------------------------------------
# save to rdata file:
save(cambio_contratado, file = file.path(path$saida, "bacen_cambio_contratado.rdata"))
# save to xlsx:
write_xlsx(cambio_contratado, file.path(path$saida, "bacen_cambio_contratado.xlsx"))
# ------------------------------------------------------------------------------
# FIM
# ------------------------------------------------------------------------------
beep("coin")
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
# Data Manipulation and Analysis
tidyverse, # suite of packages designed for data science
# loads: ggplot2, dplyr, tidyr, readr,
#        purrr, tibble, stringr, forcats
reshape2,  # Data restructuring
# Data Visualization
ggthemes,  # extra themes, scales and geoms for ggplot
ggpubr,    # nice commands for ggplot2
# Geographic Data
geobr,     # read geographic data from Brazil
sf,        # support for spatial vector data
# World Geographic Data
rnaturalearth, # world map data from Natural Earth
rnaturalearthdata,
# Brazilian Data
sidrar,     # Access data from SIDRA IBGE
GetBCBData, # Access data from BACEN
rbcb,       # Access data from BACEN
# Date and Time Manipulation
lubridate, # Date-time data manipulation
# Excel Data Interaction
readxl,    # read from xlsx
writexl,   # write to xlsx
openxlsx,  # read, write and edit XLSX files, keeping the format
# Paralel Computing:
future,    # parallel computing
furrr,     # parallel mapping
httr,      # HTTP tools
# Econometrics
forecast,  # Time Series Analysis
plm,       # Linear models for panel data
seasonal,  # Seasonal adjustment
# Web acrapping
rvest,     # download and manipulate HTML and XML
# Miscellaneous
calendR,      # calendários
pryr,         # Tools for Computing
RColorBrewer, # Color schemes for maps and graphics
extrafont,    # Use non-standard fonts
scales,       # comma in numbers
zip,          # zip files
beepr         # beep
)
tema = "cambio"
# pasta de saída dos dados:
path = list(
saida = "C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/_rstudio_antigo/data/bacen/cambio"
)
path$saida
# carregar glossario:
glossario <- read_excel(
file.path(path$saida,
"bacen_cambio_glossario.xlsx"))
# Código das séries:
ids_bacen = glossario$codigo
ids_bacen
# data inicial
data_ini = as.Date(min(glossario$inicio))
data_ini
df = gbcbd_get_series(
id = 25406,
first.date = '2000-01-01',
last.date  = Sys.Date(),
)
# Set up a future plan
plan(multisession)
# ------------------------------------------------------------------------------
# Define a function to download data and retry if unsuccessful
download_data <- function(id) {
tryCatch(
{
df <- gbcbd_get_series(
id = id,
first.date = data_ini,
last.date  = Sys.Date()
)
# Check if the data frame is empty
if (nrow(df) == 1) {
stop("Data frame is empty")
}
return(df)
},
error = function(e) {
message(paste("Failed to download data for id", id, "- retrying"))
Sys.sleep(1)  # wait for 5 seconds before retrying
download_data(id)  # recursive call to retry
}
)
}
# ------------------------------------------------------------------------------
# Use future_map to download data in parallel
df_list = future_map(ids_bacen, ~download_data(.x))
# Now df_list is a list of data frames
# ------------------------------------------------------------------------------
# TRATAMENTO
# ------------------------------------------------------------------------------
# Combine all data frames in the list into one data frame
df = bind_rows(df_list)
# delete column:
df$series.name = NULL
# rename colnames:
df <- df %>%
rename(
data = ref.date,
codigo = id.num
)
# ------------------------------------------------------------------------------
# Assuming df is your data frame
df <- df %>%
spread(key = codigo, value = value)
# Sort the dataframe by the data column
df <- df %>%
arrange(data)
# ------------------------------------------------------------------------------
# renomear as colunas:
rename_vector <- setNames(glossario$colname, glossario$codigo)
# Select only the columns in 'df' that are present in 'glossario$codigo'
common_columns <- intersect(names(df), glossario$codigo)
# Rename the columns
df <- df %>%
rename_at(vars(all_of(common_columns)), ~ rename_vector[.])
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
# Data Manipulation and Analysis
tidyverse, # suite of packages designed for data science
# loads: ggplot2, dplyr, tidyr, readr,
#        purrr, tibble, stringr, forcats
reshape2,  # Data restructuring
# Data Visualization
ggthemes,  # extra themes, scales and geoms for ggplot
ggpubr,    # nice commands for ggplot2
# Geographic Data
geobr,     # read geographic data from Brazil
sf,        # support for spatial vector data
# World Geographic Data
rnaturalearth, # world map data from Natural Earth
rnaturalearthdata,
# Brazilian Data
sidrar,     # Access data from SIDRA IBGE
GetBCBData, # Access data from BACEN
rbcb,       # Access data from BACEN
# Date and Time Manipulation
lubridate, # Date-time data manipulation
# Excel Data Interaction
readxl,    # read from xlsx
writexl,   # write to xlsx
openxlsx,  # read, write and edit XLSX files, keeping the format
# Paralel Computing:
future,    # parallel computing
furrr,     # parallel mapping
httr,      # HTTP tools
# Econometrics
forecast,  # Time Series Analysis
plm,       # Linear models for panel data
seasonal,  # Seasonal adjustment
# Web acrapping
rvest,     # download and manipulate HTML and XML
# Miscellaneous
calendR,      # calendários
pryr,         # Tools for Computing
RColorBrewer, # Color schemes for maps and graphics
extrafont,    # Use non-standard fonts
scales,       # comma in numbers
zip,          # zip files
beepr         # beep
)
tema = "cambio"
# pasta de saída dos dados:
path = list(
saida = "C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/_rstudio_antigo/data/bacen/cambio"
)
path$saida
# carregar glossario:
glossario <- read_excel(
file.path(path$saida,
"bacen_cambio_glossario.xlsx"))
# Código das séries:
ids_bacen = glossario$codigo
ids_bacen
# data inicial
data_ini = as.Date(min(glossario$inicio))
data_ini
df = gbcbd_get_series(
id = 25406,
first.date = '2000-01-01',
last.date  = Sys.Date(),
)
# Set up a future plan
plan(multisession)
# ------------------------------------------------------------------------------
# Define a function to download data and retry if unsuccessful
download_data <- function(id) {
tryCatch(
{
df <- gbcbd_get_series(
id = id,
first.date = data_ini,
last.date  = Sys.Date()
)
# Check if the data frame is empty
if (nrow(df) == 1) {
stop("Data frame is empty")
}
return(df)
},
error = function(e) {
message(paste("Failed to download data for id", id, "- retrying"))
Sys.sleep(1)  # wait for 5 seconds before retrying
download_data(id)  # recursive call to retry
}
)
}
# ------------------------------------------------------------------------------
# Use future_map to download data in parallel
df_list = future_map(ids_bacen, ~download_data(.x))
# Now df_list is a list of data frames
# ------------------------------------------------------------------------------
# TRATAMENTO
# ------------------------------------------------------------------------------
# Combine all data frames in the list into one data frame
df = bind_rows(df_list)
# delete column:
df$series.name = NULL
# rename colnames:
df <- df %>%
rename(
data = ref.date,
codigo = id.num
)
# ------------------------------------------------------------------------------
# Assuming df is your data frame
df <- df %>%
spread(key = codigo, value = value)
# Sort the dataframe by the data column
df <- df %>%
arrange(data)
# ------------------------------------------------------------------------------
# renomear as colunas:
rename_vector <- setNames(glossario$colname, glossario$codigo)
# Select only the columns in 'df' that are present in 'glossario$codigo'
common_columns <- intersect(names(df), glossario$codigo)
# Rename the columns
df <- df %>%
rename_at(vars(all_of(common_columns)), ~ rename_vector[.])
# ------------------------------------------------------------------------------
# cria uma lista com o glossario e os dados
cambio_contratado = list(
glossario = glossario,
dados = df
)
View(cambio_contratado$dados)
View(cambio_contratado$glossario)
# ------------------------------------------------------------------------------
# save to rdata file:
save(cambio_contratado, file = file.path(path$saida, "bacen_cambio_contratado.rdata"))
# save to xlsx:
write_xlsx(cambio_contratado, file.path(path$saida, "bacen_cambio_contratado.xlsx"))
# ------------------------------------------------------------------------------
# FIM
# ------------------------------------------------------------------------------
beep("coin")
