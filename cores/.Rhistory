file = "cores.rdata")
# load:
load("cores.rdata")
# ------------------------------------------------------------------------------
# Convert to dataframe
df_cores <- do.call(rbind, lapply(names(cores), function(name) {
data.frame(cor = name, codigo = cores[[name]])
}))
# Adicionar a quarta coluna com o código da cor entre aspas
df_cores$codigo_com_aspas <- paste0('"', df_cores$codigo, '"')
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Sheet1")
# Write the dataframe
writeData(wb, "Sheet1", df_cores)
# Apply colors to the third column based on the second column
for (i in 1:nrow(df_cores)) {
color_style <- createStyle(fgFill = df_cores$codigo[i], fontColour = df_cores$codigo[i])
writeData(wb, "Sheet1", df_cores$codigo[i], startCol = 4, startRow = i + 1, colNames = FALSE)
addStyle(wb, "Sheet1", style = color_style, rows = i + 1, cols = 4, gridExpand = TRUE)
}
# Save the workbook
saveWorkbook(wb, "cores.xlsx", overwrite = TRUE)
# Calculate the number of rows and columns in the grid
n <- ceiling(sqrt(length(cores)))
# Create a grid of positions manually to preserve the order
x <- rep(1:n, each = n)
y <- rev(rep(1:n, times = n))  # Reverse the y positions here
grid <- data.frame(x = x[1:length(cores)], y = y[1:length(cores)])
# Create a data frame with the colors and positions
df <- data.frame(
color = factor(names(cores), levels = names(cores)),  # Keep the original order of colors
count = rep(1, length(cores)),  # Equal count for each color
x = grid$x,  # x position
y = grid$y  # y position
)
# Function to calculate the luminance of a color
luminance <- function(color) {
rgb <- col2rgb(cores[[color]])
0.299*rgb[1,] + 0.587*rgb[2,] + 0.114*rgb[3,]
}
# Function to choose a readable color for the text
text_color <- function(color) {
ifelse(luminance(color) > 128, "black", "white")
}
# Create the plot with squares
p <- ggplot(df, aes(x = x, y = y, fill = color)) +
geom_tile(color = "black", lwd = 0.5) +  # Create the squares
# geom_text(aes(label = color, color = sapply(color, text_color)), size = 4) +  # Add the color names
geom_text(aes(label = paste(color, "\n", cores[color], sep = ""), color = sapply(color, text_color)), size = 3) +  # Add color names and RGB codes
scale_fill_manual(values = unlist(cores)) +  # Use the color palette
scale_color_identity() +  # Use the color specified in geom_text
theme_void() +  # Remove axes and labels
theme(plot.background = element_rect(fill = "black"),  # Set the background to black
legend.position = "none")  # Remove the legend
# Display the plot
plot(p)
# Save the plot as a PNG file
ggsave("cores.png", plot = p, width = 10, height = 10, dpi = 300, bg = "black")
# Save the plot as a PDF file
ggsave("cores.pdf", plot = p, width = 10, height = 10, device = "pdf", bg = "black")
View(cores)
View(df_cores)
gc()
knitr::opts_chunk$set(echo = TRUE)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
beepr,     # beep
readxl,    # read from xlsx
tidyverse,
writexl,    # write to xlsx
ggplot2,
openxlsx
)
# # path to output:
# path.cores = "C:/andre/assessoria/2_tools/cores/cores.rdata"
cores <- list(
# paleta BB
"bb.amarelo"      = "#FCFC30",
"bb.azul"         = "#465EFF",
"bb.azul.escuro"  = "#3333BD",
"bb.roxo.claro"   = "#BDB6FF",
"bb.roxo.escuro"  = "#735CC6",
"bb.verde.claro"  = "#83FFEA",
"bb.verde.escuro" = "#00EBD0",
"bb.rosa.claro"   = "#FFA7D3",
"bb.rosa.escuro"  = "#FF6E91",
"bb.azul.claro"   = "#54DCFC",
"bb.amarelo.claro"= "#FFF7B5",
# paleta BB estilo
"bb.estilo.AzulSofisticação" = "#0F2846",
"bb.estilo.AzulEstilo" = "#467DC3",
"bb.estilo.AreiaTranquilidade" = "#D7D2CD",
"bb.estilo.Amarelo" = "#FCFC30",
# cinzas
"branco"          = "#FFFFFF",
"preto"           = "#000000",
"cinza.claro"     = "#E5E5E5",
"cinza.azulado"   = "#99ABB7",
"grey80"          = "#CCCCCC",
"grey60"          = "#999999",
"grey40"          = "#666666",
"grey30"          = "#4D4D4D",
# mapas
"verde"           = "#005A32",
# mapa mundi
"denim.claro"     = "#E5EDF4",
"azul.oceano"     = "#2E6CA4",
"azul.marinho"    = "#002D4B",
# mapa da apresentação
"uf.destaque"     = "#4179AC",
"uf.outros"       = "#B3C9DE",
# IDE IPE
"ide.ipe.rosa"    = "#B47D7D",
"ide.ipe.amber"   = "#FFC000",
"ide.ipe.verde"   = "#5AAA90",
"ide.ipe.azul"    = "#002D4B",
# IFDM:
"ifdm.laranja"    = "#FF7271",
"ifdm.amarelo"    = "#FFDE72",
"ifdm.azul"       = "#5BD4FF",
"ifdm.verde"      = "#B9E08D",
# paleta para amber
"christine"       = "#E46C0A",
"light.blue"      = "#4BACC6",
# inmetro
"inmetro.DarkRed"    = "#C00000",
"inmetro.RedOrange"  = "#FF3200",
"inmetro.DarkOrange" = "#FF6000",
"inmetro.Orange"     = "#FFA000",
"inmetro.LightOrange"= "#FFC03C",
"inmetro.PaleYellow" = "#FFFAAA",
"inmetro.Gray"       = "#A5A5A5",
"inmetro.PaleCyan"   = "#E1FFFF",
"inmetro.LightBlue"  = "#B4F0FA",
"inmetro.SkyBlue"    = "#96D2FA",
"inmetro.MediumBlue" = "#50A5F5",
"inmetro.Blue"       = "#1E6EEB",
"inmetro.DarkBlue"   = "#0000CD",
# bancos
Caixa     = "#1C60AB",
Caixa2    = "#E97715",
Santander = "#EC0000",
Bradesco  = "#CC092F",
Bradesco2 = "#B81570",
Itau      = "#FF6001"
)
# ------------------------------------------------------------------------------
# Save into a .RData file:
save(
cores,
file = "cores.rdata")
# load:
load("cores.rdata")
# ------------------------------------------------------------------------------
# Convert to dataframe
df_cores <- do.call(rbind, lapply(names(cores), function(name) {
data.frame(cor = name, codigo = cores[[name]])
}))
# Adicionar a quarta coluna com o código da cor entre aspas
df_cores$codigo_com_aspas <- paste0('"', df_cores$codigo, '"')
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Sheet1")
# Write the dataframe
writeData(wb, "Sheet1", df_cores)
# Apply colors to the third column based on the second column
for (i in 1:nrow(df_cores)) {
color_style <- createStyle(fgFill = df_cores$codigo[i], fontColour = df_cores$codigo[i])
writeData(wb, "Sheet1", df_cores$codigo[i], startCol = 4, startRow = i + 1, colNames = FALSE)
addStyle(wb, "Sheet1", style = color_style, rows = i + 1, cols = 4, gridExpand = TRUE)
}
# Save the workbook
saveWorkbook(wb, "cores.xlsx", overwrite = TRUE)
# Calculate the number of rows and columns in the grid
n <- ceiling(sqrt(length(cores)))
# Create a grid of positions manually to preserve the order
x <- rep(1:n, each = n)
y <- rev(rep(1:n, times = n))  # Reverse the y positions here
grid <- data.frame(x = x[1:length(cores)], y = y[1:length(cores)])
# Create a data frame with the colors and positions
df <- data.frame(
color = factor(names(cores), levels = names(cores)),  # Keep the original order of colors
count = rep(1, length(cores)),  # Equal count for each color
x = grid$x,  # x position
y = grid$y  # y position
)
# Function to calculate the luminance of a color
luminance <- function(color) {
rgb <- col2rgb(cores[[color]])
0.299*rgb[1,] + 0.587*rgb[2,] + 0.114*rgb[3,]
}
# Function to choose a readable color for the text
text_color <- function(color) {
ifelse(luminance(color) > 128, "black", "white")
}
# Create the plot with squares
p <- ggplot(df, aes(x = x, y = y, fill = color)) +
geom_tile(color = "black", lwd = 0.5) +  # Create the squares
# geom_text(aes(label = color, color = sapply(color, text_color)), size = 4) +  # Add the color names
geom_text(aes(label = paste(color, "\n", cores[color], sep = ""), color = sapply(color, text_color)), size = 3) +  # Add color names and RGB codes
scale_fill_manual(values = unlist(cores)) +  # Use the color palette
scale_color_identity() +  # Use the color specified in geom_text
theme_void() +  # Remove axes and labels
theme(plot.background = element_rect(fill = "black"),  # Set the background to black
legend.position = "none")  # Remove the legend
# Display the plot
plot(p)
# Save the plot as a PNG file
ggsave("cores.png", plot = p, width = 10, height = 10, dpi = 300)
# Save the plot as a PDF file
ggsave("cores.pdf", plot = p, width = 10, height = 10, device = "pdf")
knitr::opts_chunk$set(echo = TRUE)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
beepr,     # beep
readxl,    # read from xlsx
tidyverse,
writexl,    # write to xlsx
ggplot2,
openxlsx
)
# # path to output:
# path.cores = "C:/andre/assessoria/2_tools/cores/cores.rdata"
cores <- list(
# paleta BB
"bb.amarelo"      = "#FCFC30",
"bb.azul"         = "#465EFF",
"bb.azul.escuro"  = "#3333BD",
"bb.roxo.claro"   = "#BDB6FF",
"bb.roxo.escuro"  = "#735CC6",
"bb.verde.claro"  = "#83FFEA",
"bb.verde.escuro" = "#00EBD0",
"bb.rosa.claro"   = "#FFA7D3",
"bb.rosa.escuro"  = "#FF6E91",
"bb.azul.claro"   = "#54DCFC",
"bb.amarelo.claro"= "#FFF7B5",
# paleta BB estilo
"bb.estilo.AzulSofisticação" = "#0F2846",
"bb.estilo.AzulEstilo" = "#467DC3",
"bb.estilo.AreiaTranquilidade" = "#D7D2CD",
"bb.estilo.Amarelo" = "#FCFC30",
# cinzas
"branco"          = "#FFFFFF",
"preto"           = "#000000",
"cinza.claro"     = "#E5E5E5",
"cinza.azulado"   = "#99ABB7",
"grey80"          = "#CCCCCC",
"grey60"          = "#999999",
"grey40"          = "#666666",
"grey30"          = "#4D4D4D",
# mapas
"verde"           = "#005A32",
# mapa mundi
"denim.claro"     = "#E5EDF4",
"azul.oceano"     = "#2E6CA4",
"azul.marinho"    = "#002D4B",
# mapa da apresentação
"uf.destaque"     = "#4179AC",
"uf.outros"       = "#B3C9DE",
# IDE IPE
"ide.ipe.rosa"    = "#B47D7D",
"ide.ipe.amber"   = "#FFC000",
"ide.ipe.verde"   = "#5AAA90",
"ide.ipe.azul"    = "#002D4B",
# IFDM:
"ifdm.laranja"    = "#FF7271",
"ifdm.amarelo"    = "#FFDE72",
"ifdm.azul"       = "#5BD4FF",
"ifdm.verde"      = "#B9E08D",
# paleta para amber
"christine"       = "#E46C0A",
"light.blue"      = "#4BACC6",
# inmetro
"inmetro.DarkRed"    = "#C00000",
"inmetro.RedOrange"  = "#FF3200",
"inmetro.DarkOrange" = "#FF6000",
"inmetro.Orange"     = "#FFA000",
"inmetro.LightOrange"= "#FFC03C",
"inmetro.PaleYellow" = "#FFFAAA",
"inmetro.Gray"       = "#A5A5A5",
"inmetro.PaleCyan"   = "#E1FFFF",
"inmetro.LightBlue"  = "#B4F0FA",
"inmetro.SkyBlue"    = "#96D2FA",
"inmetro.MediumBlue" = "#50A5F5",
"inmetro.Blue"       = "#1E6EEB",
"inmetro.DarkBlue"   = "#0000CD",
# bancos
Caixa     = "#1C60AB",
Caixa2    = "#E97715",
Santander = "#EC0000",
Bradesco  = "#CC092F",
Bradesco2 = "#B81570",
Itau      = "#FF6001"
)
# ------------------------------------------------------------------------------
# Save into a .RData file:
save(
cores,
file = "cores.rdata")
# load:
load("cores.rdata")
# ------------------------------------------------------------------------------
# Convert to dataframe
df_cores <- do.call(rbind, lapply(names(cores), function(name) {
data.frame(cor = name, codigo = cores[[name]])
}))
# Adicionar a quarta coluna com o código da cor entre aspas
df_cores$codigo_com_aspas <- paste0('"', df_cores$codigo, '"')
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Sheet1")
# Write the dataframe
writeData(wb, "Sheet1", df_cores)
# Apply colors to the third column based on the second column
for (i in 1:nrow(df_cores)) {
color_style <- createStyle(fgFill = df_cores$codigo[i], fontColour = df_cores$codigo[i])
writeData(wb, "Sheet1", df_cores$codigo[i], startCol = 4, startRow = i + 1, colNames = FALSE)
addStyle(wb, "Sheet1", style = color_style, rows = i + 1, cols = 4, gridExpand = TRUE)
}
# Save the workbook
saveWorkbook(wb, "cores.xlsx", overwrite = TRUE)
# Calculate the number of rows and columns in the grid
n <- ceiling(sqrt(length(cores)))
# Create a grid of positions manually to preserve the order
x <- rep(1:n, each = n)
y <- rev(rep(1:n, times = n))  # Reverse the y positions here
grid <- data.frame(x = x[1:length(cores)], y = y[1:length(cores)])
# Create a data frame with the colors and positions
df <- data.frame(
color = factor(names(cores), levels = names(cores)),  # Keep the original order of colors
count = rep(1, length(cores)),  # Equal count for each color
x = grid$x,  # x position
y = grid$y  # y position
)
# Function to calculate the luminance of a color
luminance <- function(color) {
rgb <- col2rgb(cores[[color]])
0.299*rgb[1,] + 0.587*rgb[2,] + 0.114*rgb[3,]
}
# Function to choose a readable color for the text
text_color <- function(color) {
ifelse(luminance(color) > 128, "black", "white")
}
# Create the plot with squares
p <- ggplot(df, aes(x = x, y = y, fill = color)) +
geom_tile(color = "black", lwd = 0.5) +  # Create the squares
# geom_text(aes(label = color, color = sapply(color, text_color)), size = 4) +  # Add the color names
geom_text(aes(label = paste(color, "\n", cores[color], sep = ""), color = sapply(color, text_color)), size = 2.5) +  # Add color names and RGB codes
scale_fill_manual(values = unlist(cores)) +  # Use the color palette
scale_color_identity() +  # Use the color specified in geom_text
theme_void() +  # Remove axes and labels
theme(plot.background = element_rect(fill = "black"),  # Set the background to black
legend.position = "none")  # Remove the legend
# Display the plot
plot(p)
# Save the plot as a PNG file
ggsave("cores.png", plot = p, width = 10, height = 10, dpi = 300)
# Save the plot as a PDF file
ggsave("cores.pdf", plot = p, width = 10, height = 10, device = "pdf")
knitr::opts_chunk$set(echo = TRUE)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
beepr,     # beep
readxl,    # read from xlsx
tidyverse,
writexl,    # write to xlsx
ggplot2,
openxlsx
)
# # path to output:
# path.cores = "C:/andre/assessoria/2_tools/cores/cores.rdata"
cores <- list(
# paleta BB
"bb.amarelo"      = "#FCFC30",
"bb.azul"         = "#465EFF",
"bb.azul.escuro"  = "#3333BD",
"bb.roxo.claro"   = "#BDB6FF",
"bb.roxo.escuro"  = "#735CC6",
"bb.verde.claro"  = "#83FFEA",
"bb.verde.escuro" = "#00EBD0",
"bb.rosa.claro"   = "#FFA7D3",
"bb.rosa.escuro"  = "#FF6E91",
"bb.azul.claro"   = "#54DCFC",
"bb.amarelo.claro"= "#FFF7B5",
# paleta BB estilo
"bb.estilo.AzulSofisticação" = "#0F2846",
"bb.estilo.AzulEstilo" = "#467DC3",
"bb.estilo.AreiaTranquilidade" = "#D7D2CD",
"bb.estilo.Amarelo" = "#FCFC30",
# cinzas
"branco"          = "#FFFFFF",
"preto"           = "#000000",
"cinza.claro"     = "#E5E5E5",
"cinza.azulado"   = "#99ABB7",
"grey80"          = "#CCCCCC",
"grey60"          = "#999999",
"grey40"          = "#666666",
"grey30"          = "#4D4D4D",
# mapas
"verde"           = "#005A32",
# mapa mundi
"denim.claro"     = "#E5EDF4",
"azul.oceano"     = "#2E6CA4",
"azul.marinho"    = "#002D4B",
# mapa da apresentação
"uf.destaque"     = "#4179AC",
"uf.outros"       = "#B3C9DE",
# IDE IPE
"ide.ipe.rosa"    = "#B47D7D",
"ide.ipe.amber"   = "#FFC000",
"ide.ipe.verde"   = "#5AAA90",
"ide.ipe.azul"    = "#002D4B",
# IFDM:
"ifdm.laranja"    = "#FF7271",
"ifdm.amarelo"    = "#FFDE72",
"ifdm.azul"       = "#5BD4FF",
"ifdm.verde"      = "#B9E08D",
# paleta para amber
"christine"       = "#E46C0A",
"light.blue"      = "#4BACC6",
# inmetro
"inmetro.DarkRed"    = "#C00000",
"inmetro.RedOrange"  = "#FF3200",
"inmetro.DarkOrange" = "#FF6000",
"inmetro.Orange"     = "#FFA000",
"inmetro.LightOrange"= "#FFC03C",
"inmetro.PaleYellow" = "#FFFAAA",
"inmetro.Gray"       = "#A5A5A5",
"inmetro.PaleCyan"   = "#E1FFFF",
"inmetro.LightBlue"  = "#B4F0FA",
"inmetro.SkyBlue"    = "#96D2FA",
"inmetro.MediumBlue" = "#50A5F5",
"inmetro.Blue"       = "#1E6EEB",
"inmetro.DarkBlue"   = "#0000CD",
# bancos
Caixa     = "#1C60AB",
Caixa2    = "#E97715",
Santander = "#EC0000",
Bradesco  = "#CC092F",
Bradesco2 = "#B81570",
Itau      = "#FF6001"
)
# ------------------------------------------------------------------------------
# Save into a .RData file:
save(
cores,
file = "cores.rdata")
# load:
load("cores.rdata")
# ------------------------------------------------------------------------------
# Convert to dataframe
df_cores <- do.call(rbind, lapply(names(cores), function(name) {
data.frame(cor = name, codigo = cores[[name]])
}))
# Adicionar a quarta coluna com o código da cor entre aspas
df_cores$codigo_com_aspas <- paste0('"', df_cores$codigo, '"')
# Create a workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Sheet1")
# Write the dataframe
writeData(wb, "Sheet1", df_cores)
# Apply colors to the third column based on the second column
for (i in 1:nrow(df_cores)) {
color_style <- createStyle(fgFill = df_cores$codigo[i], fontColour = df_cores$codigo[i])
writeData(wb, "Sheet1", df_cores$codigo[i], startCol = 4, startRow = i + 1, colNames = FALSE)
addStyle(wb, "Sheet1", style = color_style, rows = i + 1, cols = 4, gridExpand = TRUE)
}
# Save the workbook
saveWorkbook(wb, "cores.xlsx", overwrite = TRUE)
# Calculate the number of rows and columns in the grid
n <- ceiling(sqrt(length(cores)))
# Create a grid of positions manually to preserve the order
x <- rep(1:n, each = n)
y <- rev(rep(1:n, times = n))  # Reverse the y positions here
grid <- data.frame(x = x[1:length(cores)], y = y[1:length(cores)])
# Create a data frame with the colors and positions
df <- data.frame(
color = factor(names(cores), levels = names(cores)),  # Keep the original order of colors
count = rep(1, length(cores)),  # Equal count for each color
x = grid$x,  # x position
y = grid$y  # y position
)
# Function to calculate the luminance of a color
luminance <- function(color) {
rgb <- col2rgb(cores[[color]])
0.299*rgb[1,] + 0.587*rgb[2,] + 0.114*rgb[3,]
}
# Function to choose a readable color for the text
text_color <- function(color) {
ifelse(luminance(color) > 128, "black", "white")
}
# Create the plot with squares
p <- ggplot(df, aes(x = x, y = y, fill = color)) +
geom_tile(color = "black", lwd = 0.5) +  # Create the squares
# geom_text(aes(label = color, color = sapply(color, text_color)), size = 4) +  # Add the color names
geom_text(aes(label = paste(color, "\n", cores[color], sep = ""), color = sapply(color, text_color)), size = 2.5) +  # Add color names and RGB codes
scale_fill_manual(values = unlist(cores)) +  # Use the color palette
scale_color_identity() +  # Use the color specified in geom_text
theme_void() +  # Remove axes and labels
theme(plot.background = element_rect(fill = "black"),  # Set the background to black
legend.position = "none")  # Remove the legend
# Display the plot
plot(p)
# Save the plot as a PNG file
ggsave("cores.png", plot = p, width = 10, height = 10, dpi = 300)
# Save the plot as a PDF file
ggsave("cores.pdf", plot = p, width = 10, height = 10, device = "pdf")
